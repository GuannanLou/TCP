
import os
import sys
import traceback
import numpy as np
import subprocess

from SBT.problem import CustomizedProblem, SurrogateProblem
from utils.utils import mkdir, savepath_parser

from pymoo.core.problem import ElementwiseProblem
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.operators.crossover.sbx import SBX
from pymoo.operators.mutation.pm import PM
from pymoo.operators.sampling.rnd import FloatRandomSampling
from pymoo.termination import get_termination
from pymoo.optimize import minimize



GA = os.environ['GA']==True
LOG = os.environ['LOG']==True
REGION = int(os.environ.get('REGION', 7))
SURROGATE = os.environ['SURROGATE']==True
save_surrogate_log = True
# print("GA  | log  |surrogate")
# print("{}| {}  |  {}".format(GA, log, surrogate))

# surrogate_scenario = None
# surrogate_scenario = 'surrogate/routes_short_2023-06-13|18:27:28/' 
# 'surrogate/routes_short_2023-05-31|15:47:49/scenario.csv'
# surrogate_scenario = 'data/routes_short_2023-06-16|07:52:55/'



def random_search(arguments, leaderboard_evaluator, route_indexer, case_number=3000, scenario_vecs=None):
    print("begin")
    print('LOG:', arguments.log)
    arguments.log=LOG
    print('LOG:', arguments.log)
    config = None
    while route_indexer.peek():
        config = route_indexer.next()
    config.original_trajectory = [config.trajectory[0], config.trajectory[1]]

    if scenario_vecs==[]:
        scenario_vecs = np.random.rand(case_number, 9+3+2)
    for scenario_vec in scenario_vecs:
        leaderboard_evaluator.run_one_case(scenario_vec, config)



def GA_search(arguments, leaderboard_evaluator, route_indexer, pop_size = 50, n_offsprings = 10, generations = 76):
    print("begin")
    arguments.log=LOG
    config = None
    while route_indexer.peek():
        config = route_indexer.next()
    config.original_trajectory = [config.trajectory[0], config.trajectory[1]]

    savepath = savepath_parser(arguments.fitness_path)
    print(savepath)

    mkdir(savepath)
    if save_surrogate_log:
        output_file = savepath+'/console.log'
        sys.stdout = open(output_file, 'w')

    problem = None
    if SURROGATE:
        print('surrogate')
        problem = SurrogateProblem(config, surrogate_path='./data/'+arguments.fitness_path.split('/')[1]+'/')
    else:
        problem = CustomizedProblem(arguments.fitness_path,
                                    arguments.fitness_path.replace('fitness.csv','criterion.csv'),
                                    leaderboard_evaluator.run_one_case,
                                    config)
    algorithm = NSGA2(
        pop_size=pop_size,
        n_offsprings=n_offsprings,
        sampling=FloatRandomSampling(),
        crossover=SBX(prob=0.9, eta=15),
        mutation=PM(eta=20),
        eliminate_duplicates=True
    )
    termination = get_termination("n_gen", generations)

    res = minimize(problem,
        algorithm,
        termination,
        seed=1,
        save_history=False,
        verbose=True)

    X = res.X
    F = res.F
    
    print(X)
    print(F)

    np.savez('./data/'+arguments.fitness_path.split('/')[1]+'/output.npz', X, F)


    if save_surrogate_log:
        sys.stdout.close()
        sys.stdout = sys.__stdout__


def search_based_testing(arguments, leaderboard_evaluator, route_indexer):
    arguments.region = REGION
    try:
        if GA: 
            GA_search(arguments, 
                    leaderboard_evaluator, 
                    route_indexer, 
                    pop_size     = 50, 
                    n_offsprings = 10, 
                    generations  = 76)
        else:
            # scenario_vecs = np.random.rand(30,14)
            scenario_vecs = np.array([
                # [0.4870758554652649,0.6271019123578278,0.6833347433876626,0.900598191528564,0.01623511795548427,0.3539132636644998,0.26737057601263337,0.8751345135005726,0.5474975467460222,0.6266503308465703,0.15932768350900872,0.23203975834954738,0.9145047982417309,0.5610621189132075],
                # [0.9948369948542068,0.42834037689677684,0.29072598560931084,0.800826605372219,0.9391639383382342,0.032325158420397626,0.4739776676963019,0.6315420733935337,0.25774880499114927,0.5119894110371718,0.09486504964387354,0.3592956682118451,0.16794261011221667,0.1531501221962629],
                # [0.08224743228419884,0.019647714337964417,0.7684277306319979,0.29615925393690523,0.4110618667016749,0.14416034005509892,0.16629344452296846,0.2720531717263447,0.9969913758587764,0.46214767465479234,0.004954925440389779,0.5579125866301936,0.5024897466953179,0.9491062799061892],
                # [0.267162720462907,0.442480618284564,0.03956401063069903,0.715757459430469,0.13011907138879508,0.8043622264300362,0.4009488866029801,0.4238056068486661,0.6775274759223721,0.8770324723269657,0.2641593986432553,0.5957204978898872,0.8827571947418619,0.6291107592208569],
                # [0.19273161376929926,0.41743875986517587,0.4435939046334879,0.04848211512896172,0.966948244351531,0.6708448668163255,0.12744152549309695,0.5149539345639357,0.06863387187812564,0.47963937046687255,0.847864416076249,0.5300954709068304,0.6754878343984275,0.13503456296374372],
                # [0.8852826534504373,0.358219552580748,0.7425157354633282,0.39304406513541057,0.06195099114877045,0.1088836303536671,0.40161718487924225,0.16402640988987027,0.8952100680678559,0.997390099913131,0.4664017192228759,0.9896627973579574,0.7169037934537399,0.2960941361910625],
                # [0.2688455144510018,0.07895532014863693,0.5529525753133356,0.39079680721152454,0.2139349085763167,0.3533673622597109,0.11035784114851421,0.5483335119139273,0.6334499090804775,0.010419256388753961,0.49301640621509546,0.37633486357376855,0.7845580487927327,0.9921386186468679],
                # [0.2333694967120028,0.034185234835896416,0.7854649384557212,0.8021230832803572,0.8138090686378212,0.8099050650082152,0.8640584543319028,0.4130216242013002,0.5485878894462596,0.07075467695190063,0.10375748717761346,0.9193868226127118,0.08546924666820865,0.7035540625118132],
                # [0.5052273582266728,0.3163873067601911,0.16220217642939727,0.9064574255395843,0.3633575210764558,0.08699502454904451,0.4416434126875427,0.26255856958731427,0.7546863409254417,0.35089707948712723,0.3209151215994963,0.7916560880988863,0.07942981317444509,0.3138992737425822],
                # [0.47592876493596903,0.26116594572415097,0.8762478653302976,0.7986660473510816,0.6912443612037128,0.7994585981632162,0.3546628728846577,0.48969321164373225,0.45256534056081843,0.043559456224117055,0.2842841002124451,0.0024480937475871434,0.4555914196207568,0.6444880598434238],
                # [0.7495286450265343,0.3511931879003506,0.4611867304261992,0.12512285228294917,0.5978247776758332,0.12021153096306203,0.8481911169154386,0.6034002795919763,0.14016845189049065,0.7609442498833512,0.6478698361950767,0.036430154853111296,0.9508593688466843,0.1392575734940965],
                # [0.8101321683249909,0.3890177913731251,0.338143640619911,0.8103088160630029,0.5823224055584099,0.9476660396278745,0.27117081636748486,0.4110068698872037,0.334531884296557,0.3811461855308792,0.05858936046629171,0.29242113012927795,0.4954740668591415,0.08941026337140079],
                # [0.662265486415782,0.9358531738381937,0.8904134662995686,0.4563719091832822,0.08542222064470861,0.6913446507338296,0.7571313270782929,0.9847002055787643,0.5591724700812493,0.8388436592817318,0.2522930830271908,0.6285769911600579,0.42232775108548604,0.9798801967018589],
                # [0.5897150149090409,0.31301677991249655,0.31583164404649333,0.6001651632044105,0.6115954414029884,0.9037780892446952,0.4020575400578933,0.5147655352459944,0.33909174543277654,0.4582620852544196,0.26798148458393656,0.7605279978102094,0.7304450718369658,0.8104710749350834],
                # [0.8227476894032291,0.4389410524330355,0.32384135287488647,0.873690088669053,0.2699293326746478,0.5603525478920404,0.8055904067403242,0.4692291067246782,0.22216136896091576,0.5958590311814346,0.47409972361728725,0.28317910335270524,0.7876407035203378,0.41788087212386416],
                # [0.9536334667390705,0.7705178519939623,0.6644792634545513,0.7131368167229188,0.3704351779901538,0.3545767223607643,0.25831309855261453,0.08224154610058998,0.2851604802009359,0.18365308540938652,0.19398370480460603,0.8721539923992334,0.18491832590947344,0.10807829750522269],
                # [0.2947785345120959,0.3416290000278065,0.6154810237766567,0.736104436323096,0.18018770740297574,0.3955157411061955,0.40065419754699894,0.6334394192855086,0.8899078688567588,0.1788366279922331,0.3709501876978615,0.4964026793924654,0.32794981750797614,0.02810548058685569],
                # [0.8738789924727174,0.4787532281321518,0.8002298257995212,0.010281197539823372,0.8258355533659324,0.6524507400839804,0.5459201917752068,0.22970842190654361,0.679237030389219,0.6003928095486121,0.588476416582076,0.20775845158309214,0.5784329885212869,0.29231978745020315],
                # [0.30705178105298414,0.4527351187993389,0.1536468197041042,0.8538008654634047,0.8798272575456095,0.9824229275240953,0.592740585750608,0.6152596642849023,0.8395177944906326,0.7870870048716326,0.7081191615888166,0.23649392100475775,0.003045876052754082,0.029319931189069948],
                # [0.9110305971169881,0.12058229534588638,0.4414466439147723,0.08804384546620858,0.9892411631595285,0.7892561472555655,0.2618867113312361,0.4438676309352336,0.060960417710745785,0.18270528842771427,0.5099223371973177,0.6401457431352343,0.8075129646095551,0.05761769490265467],
                # [0.07111988539897929,0.04301867949918481,0.9058798752446479,0.40662051372124575,0.9153148460174366,0.7230916649474372,0.039270682256432154,0.6580794392270095,0.30588696248705927,0.4267874759579263,0.12051878723468945,0.9175910931175442,0.47527620325286635,0.4131689431935134],
                # [0.8122799307326807,0.029514537527931428,0.6603639688240553,0.09401107546848875,0.3401980677766969,0.3768463042032817,0.9626771243610468,0.8466970676868713,0.6571799986720713,0.48626042935405334,0.008355936008259235,0.5303990143127351,0.35307838347088016,0.24360947794114485],
                # [0.9822099025101554,0.6385798777492966,0.5238335286613484,0.6669398390881054,0.9654898209859345,0.32777300426549616,0.655633763992127,0.19861218377007528,0.6108415492896258,0.944322320059034,0.6156849530537468,0.29246509314697333,0.8562407824837487,0.18458372441241],
                # [0.18420524505494584,0.9367116807647081,0.11694524939321549,0.004457334116808265,0.40101985839202636,0.8417410969047633,0.8530999262446418,0.6652514836541012,0.40664018618293507,0.6093274343364056,0.5417508915013343,0.05288242953971667,0.5456851207125827,0.9185757871284534],
                # [0.4959404955594754,0.918399422484172,0.09604435233815367,0.1852619820677518,0.9604989950886874,0.7065643300597417,0.6774051967282084,0.09365356546077264,0.80216844066208,0.19523539538712587,0.8361525373079619,0.9700143184688798,0.5401237728970496,0.5994027294968134],
                [0.9185474554482653,0.5930565334053087,0.5518184296948577,0.923420940493178,0.47247571972229085,0.5718665986379406,0.8988023299168412,0.96955785228788,0.8259395659901911,0.8484898614605498,0.6145235963532206,0.5597358460698808,0.6174701463382125,0.370088075201645],
                [0.9557631227470994,0.8336214234139732,0.8666488238499993,0.044858287698903765,0.625680178556861,0.031860983874022475,0.40013882507107645,0.575095905421654,0.5040546778227354,0.19008617865276067,0.5909614980375981,0.15420640252423568,0.5031563686689519,0.7831847791135774],
                [0.422776329517085,0.9865705424872657,0.8010718649687049,0.8382418960778018,0.788660010890785,0.26451087358254555,0.320877160846046,0.0747079386374121,0.512723117357111,0.19876702648703526,0.9028967039336115,0.3640496292546358,0.8700485285329603,0.01992884530618544],
                [0.2393443665274777,0.9947288966762612,0.5684479334127311,0.26518898530197166,0.3074339782398394,0.14711116257950196,0.4793738496844401,0.87620272802744,0.788389299016223,0.6224029434668386,0.6016654470946489,0.41347943044524615,0.18330842677479497,0.9532350752266529],
            ])
            # scenario_vecs = np.array([
            #                     # [0.59777615, 0.72223506, 0.12374883, 0.30677363, 0.70592351,
            #                     #     0.80276719, 0.79815411, 0.84394874, 0.01639043, 0.74687154,
            #                     #     0.54046098, 0.68564598, 0.21594995, 0.10060122],
            #                     # [0.39718882, 0.08087786, 0.37792418, 0.07962608, 0.98978885,
            #                     #     0.85734188, 0.9852377 , 0.87401614, 0.68767837, 0.52781966,
            #                     #     0.49976442, 0.681722  , 0.34517205, 0.95409391],
            #                     # [0.34050009, 0.7266114 , 0.65643148, 0.52285901, 0.90019775,
            #                     #     0.77005633, 0.98038164, 0.8759482 , 0.40710583, 0.45522409,
            #                     #     0.81124623, 0.92224074, 0.19620584, 0.84855626],
            #                     # [0.91695837, 0.72107255, 0.3723671 , 0.28326   , 0.76679765,
            #                     #     0.00376423, 0.96084713, 0.86335041, 0.76311738, 0.72054708,
            #                     #     0.51065933, 0.69450803, 0.21293915, 0.76181747],
            #                     # [0.923695116920911,0.9568191992714273,0.629268968599251,0.8288283145444685,0.9884005937299758,
            #                     #  0.8399063090569735,0.0867782878117962,0.7941796695312668,0.8023733805467229,0.5037949243524253,
            #                     #  0.7319753286764431,0.5366123521018167,0.15893877812418145,0.7413148903446132],
            #                     # [0.35233707, 0.75028226, 0.10965908, 0.87967191, 0.70753986,
            #                     #     0.84855801, 0.98681216, 0.88160435, 0.39627272, 0.76438451,
            #                     #     0.69382362, 0.7107312 , 0.238529  , 0.97225962],
            #                     [0.5182611 , 0.88692106, 0.38644577, 0.01121172, 0.35307925,
            #                         0.03615567, 0.64252361, 0.35838475, 0.3850761 , 0.70777599,
            #                         0.59693373, 0.02451736, 0.34204734, 0.14292765],
            #                     [0.21115571, 0.90474183, 0.09060072, 0.25771789, 0.17766221,
            #                         0.86767607, 0.58789836, 0.64877558, 0.62716936, 0.72883079,
            #                         0.82782594, 0.32478962, 0.43482505, 0.19771699],
            #                     [0.3605627 , 0.14704328, 0.16645664, 0.35463963, 0.07711742,
            #                         0.39131142, 0.10729231, 0.85692365, 0.18912809, 0.35038889,
            #                         0.51620601, 0.15883559, 0.27988145, 0.67510481]
            #                 ])
            # scenario_vecs = np.array([
            #     [0.923695116920911, 0.9568191992714273,0.629268968599251,  0.8288283145444685,0.9884005937299758,
            #      0.8399063090569735,0.0867782878117962,0.7941796695312668, 0.8023733805467229,0.5037949243524253,
            #      0.7319753286764431,0.5366123521018167,0.15893877812418145,0.7413148903446132]
            # ]*1)
            print(scenario_vecs)

            random_search(arguments, 
                        leaderboard_evaluator, 
                        route_indexer, 
                        case_number=3000, 
                        scenario_vecs=scenario_vecs)
    except Exception as e:
        traceback.print_exc()
    finally:
        
        if not SURROGATE:
            del leaderboard_evaluator
    
    command = 'pkill -9 -f "CarlaUE4-Linux-Shipping|CarlaUE4.sh"'
    try:
        subprocess.run(command, shell=True, check=True)
        print("停止carla")
    except subprocess.CalledProcessError as e:
        print(f"停止carla失败，返回码: {e.returncode}")

    command = 'pkill -9 -f "python3"'
    try:
        subprocess.run(command, shell=True, check=True)
        print("停止carla")
    except subprocess.CalledProcessError as e:
        print(f"停止carla失败，返回码: {e.returncode}")